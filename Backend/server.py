from flask import Flask, render_template, send_from_directory, request, jsonify, redirect
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ChatMember
from aiogram.filters import Command
from aiogram import F
from threading import Thread
from db_utils import add_user, get_user, update_user_coins, update_invited_friends, award_referral_bonus, daily_reward_amount, accrue_profit_per_hour
from db_utils import get_card_data, update_card_level, session, User
import datetime


TOKEN = '7636282193:AAHHIcQdFrM5ZV2_ObyjjjvUwCqr6FFjL2U' #–í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
apiserv = "https://9fb2-57-129-38-235.ngrok-free.app"  #—Å—Å—ã–ª–∫–∞ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
your_channel = "https://t.me/your_channel" #–≤–∞—à —Ç–≥ –∫–∞–Ω–∞–ª


bot = Bot(token=TOKEN)
dp = Dispatcher()


app = Flask(__name__, static_folder='../src', template_folder='../src')


#–†–æ—É—Ç—ã Flask



@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "User"

    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    web_app_url = f"{apiserv}/user/{username}?user_id={user_id}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å –≤ 1 –∫–ª–∏–∫ üéÆ', web_app=WebAppInfo(url=web_app_url))],
        [InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢', url=f'{your_channel}')],
        [InlineKeyboardButton(text='–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∏–≥—Ä–µ üí∞', callback_data='how_to_earn')]
    ])

    referrer_id = None
    if args and args[0].startswith('referrer_'):
        referrer_id = args[0].split('_')[1]

    existing_user = get_user(user_id)
    if existing_user:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MMM Coin üéÆ!\n"
            "–û—Ç–Ω—ã–Ω–µ —Ç—ã ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä. –¢–∞–ø–∞–π –ø–æ —ç–∫—Ä–∞–Ω—É, —Å–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã, –∫–∞—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥,"
            " —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–æ—Ö–æ–¥–∞."
            "\n–ü—Ä–æ –¥—Ä—É–∑–µ–π –Ω–µ –∑–∞–±—ã–≤–∞–π ‚Äî –∑–æ–≤–∏ –∏—Ö –≤ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!",
            reply_markup=keyboard
        )
        return

    new_user = add_user(user_id, username, referrer_id=referrer_id)

    if referrer_id:
        premium_status = await check_premium_status(user_id)
        award_referral_bonus(user_id, referrer_id, premium_status)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MMM Coin üéÆ!\n"
        "–û—Ç–Ω—ã–Ω–µ —Ç—ã ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä. –¢–∞–ø–∞–π –ø–æ —ç–∫—Ä–∞–Ω—É, —Å–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã, –∫–∞—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥,"
        " —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–æ—Ö–æ–¥–∞."
        "\n–ü—Ä–æ –¥—Ä—É–∑–µ–π –Ω–µ –∑–∞–±—ã–≤–∞–π ‚Äî –∑–æ–≤–∏ –∏—Ö –≤ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç!",
        reply_markup=keyboard
    )



@dp.callback_query(F.data.in_({'how_to_earn'}))
async def button_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or callback_query.from_user.first_name or "User"

    web_app_url = f"{apiserv}/user/{username}?user_id={user_id}"
    keyboards = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å –≤ 1 –∫–ª–∏–∫ üéÆ', web_app=WebAppInfo(url=web_app_url))],
        [InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üì¢', url=f'{your_channel}')]
    ])

    await callback_query.message.answer(
        "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –≤ MMMCoin?\n"
        "üí∞Tap to earn\n–¢–∞–ø–∞–π –ø–æ —ç–∫—Ä–∞–Ω—É –∏ —Å–æ–±–∏—Ä–∞–π –º–æ–Ω–µ—Ç—ã.\n"
        "\n‚õèMine\n–ü—Ä–æ–∫–∞—á–∏–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.\n"
        "\n‚è∞ –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å\n–ë–∏—Ä–∂–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ"
        " 3—Ö —á–∞—Å–æ–≤. –î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É —Å–Ω–æ–≤–∞.\n"
        "\nüìà LVL\n–ß–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ‚Äî —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å –±–∏—Ä–∂–∏."
        " –ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—â—ë –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç.\n"
        "\nüë• Friends\n–ü—Ä–∏–≥–ª–∞—à–∞–π —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã. –ü–æ–º–æ–≥–∏ –¥—Ä—É–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–µ –ª–∏–≥–∏,"
        " –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—â—ë –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤.",
        reply_markup=keyboards
    )

    await callback_query.answer()


#–ó–∞–ø—É—Å–∫ T–≥ –±–æ—Ç–∞
async def telegram_main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


#–ó–∞–ø—É—Å–∫ Flask
def run_flask():
    app.run(host='0.0.0.0', port=5000, use_reloader=False)


if __name__ == '__main__':
    # Flask  –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.start()

    # Telegram –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(telegram_main())
